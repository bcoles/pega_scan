#!/usr/bin/env ruby
#
# This file is part of PegaScan
# https://github.com/bcoles/pega_scan
#

require 'pega_scan'
require 'optparse'
require 'resolv'

def banner
  puts '
       _____                  _____                 
      |  __ \                / ____|                
      | |__) |__  __ _  __ _| (___   ___ __ _ _ __  
      |  ___/ _ \/ _` |/ _` |\___ \ / __/ _` | \'_ \ 
      | |  |  __/ (_| | (_| |____) | (_| (_| | | | |
      |_|   \___|\__, |\__,_|_____/ \___\__,_|_| |_|
                  __/ |                             
                 |___/                 version 0.0.1'

  puts
  puts '-' * 60
end

banner
options = {}
opts = OptionParser.new do |opts|
  opts.banner = 'Usage: pega-scan -u <url> [options]'

  opts.on('-u URL', '--url URL', 'PegaRules URL to scan') do |v|
    unless v.match(%r{\Ahttps?://})
      puts "- Invalid URL: #{v}"
      exit(1)
    end
    options[:url] = v
  end

  opts.on('-s', '--skip', 'Skip check for PegaRules') do
    options[:skip] = true
  end

  opts.on('-v', '--verbose', 'Enable verbose output') do
    options[:verbose] = true
  end

  opts.on('-h', '--help', 'Show this help') do 
    puts opts
    exit
  end
end

opts.parse!

$VERBOSE = true unless options[:verbose].nil?
@check = true unless options[:skip]

def scan(url)
  puts "Scan started at #{Time.now.getutc}"
  puts "URL: #{url}"

  # parse URL
  target = nil
  begin
    target = URI.parse(url.split('?').first)
  rescue
    puts "- Could not parse target URL: #{url}"
  end
  exit(1) if target.nil?

  # resolve IP address
  begin
    ip = Resolv.getaddress(target.host).to_s
    puts "IP: #{ip}" unless ip.nil?
  rescue
    puts "- Could not resolve hostname #{target.host}"
  end

  puts "Port: #{target.port}"
  puts '-'*60

  # Check if the URL is PegaRules
  if @check
    if PegaScan.isPega(url)
      puts '+ Found PegaRules'
    else
      puts '- PegaRules not found'
      exit(1)
    end
  end

  # Get PegaRules version
  version = PegaScan.getVersion(url)
  puts "+ Version: #{version}" if version

  # Check if documentation is available
  documentation = PegaScan.documentation(url)
  puts "+ Documentation is available: #{url}prhelp/home.htm" if documentation

  # Check if SAMLAuth SSO is enabled
  saml_auth = PegaScan.samlAuth(url)
  puts '+ SAML Authentication is enabled' if saml_auth

  # Check if SOAP API is accessible
  soap_api = PegaScan.remoteSoapApi(url)
  puts '+ Remote SOAP API is available' if soap_api

  # Check if REST API is accessible
  rest_api = PegaScan.remoteRestApi(url)
  puts '+ Remote REST API is available' if rest_api

  # Check if System Management Console is available
  sys_mgmt = PegaScan.systemManagementConsole(url)
  if sys_mgmt
    puts "+ System Management Console is available: #{url}prsysmgmt/"
    # Retrieve list of node names from System Management Console
    nodes = PegaScan.getSystemManagementNodes(url)
    puts "+ System Management nodes: #{nodes.join(',')}" unless nodes.empty?
  end

  puts "Scan finished at #{Time.now.getutc}"
  puts '-' * 60
end

scan(options[:url])
